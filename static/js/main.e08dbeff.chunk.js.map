{"version":3,"sources":["components/TimerControl.js","components/TimerDisplay.js","components/PomodoroClock.js","serviceWorker.js","index.js"],"names":["TimerControl","props","type","length","modifyLength","react_default","a","createElement","Card","className","CardBody","CardTitle","id","CardSubtitle","ButtonGroup","Button","onClick","color","TimerDisplay","reset","startStop","formatNumberToDigit","num","concat","m","Math","floor","s","formatSecondsToClock","TYPES","PomodoroClock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInitTimerLength","arguments","undefined","state","running","setState","prevState","timerLength","sessionLength","breakLength","handleStartStop","intervalID","setInterval","handleTimerCountDown","document","getElementById","play","find","handleReset","clearInterval","pause","currentTime","handleModifyLength","operator","console","log","_this$state","Container","Jumbotron","Row","Col","components_TimerControl","key","components_TimerDisplay","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_PomodoroClock","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e08dbeff.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Card, CardBody, CardTitle, CardSubtitle, Button, ButtonGroup } from 'reactstrap';\r\n\r\nconst TimerControl = (props) => {\r\n    const { type, length, modifyLength } = props;\r\n\r\n    const formatSecondsToMinutes = () => {\r\n        return length / 60;\r\n    };\r\n\r\n    return (\r\n        <Card className=\"text-center\">\r\n            <CardBody>\r\n                <CardTitle id={type + \"-label\"} className=\"h3\">{type} length</CardTitle>\r\n                <CardSubtitle id={type + \"-length\"} className=\"h4\">{formatSecondsToMinutes()}</CardSubtitle>\r\n                <ButtonGroup>\r\n                    <Button id={type + \"-decrement\"} onClick={() => modifyLength(type, '-')} color=\"danger\">decrement</Button>\r\n\t\t\t        <Button id={type + \"-increment\"} onClick={() => modifyLength(type, '+')} color=\"success\">increment</Button>\r\n                </ButtonGroup>\r\n            </CardBody>\r\n\t\t</Card>\r\n    );\r\n};\r\n\r\nTimerControl.propTypes = {\r\n\ttext: PropTypes.string,\r\n    length: PropTypes.number,\r\n    modifyLength: PropTypes.func\r\n}\r\n\r\nexport default TimerControl;","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Card, CardBody, CardTitle, CardSubtitle, Button, ButtonGroup } from 'reactstrap';\r\n\r\nconst TimerDisplay = (props) => {\r\n    const { reset, startStop, length, type } = props;\r\n\r\n    const formatSecondsToClock = () => {\r\n        let m = Math.floor(length / 60);\r\n        let s = length - 60 * m;\r\n        return `${formatNumberToDigit(m)}:${formatNumberToDigit(s)}`;\r\n    };\r\n\r\n    const formatNumberToDigit = (num) => {\r\n        return num < 10 ? `0${num}` : num;\r\n    };\r\n    \r\n    return (\r\n        <Card>\r\n            <CardBody className=\"text-center\">\r\n\t\t\t    <CardTitle id=\"timer-label\" className=\"h2\">{type}</CardTitle>\r\n                <CardSubtitle id=\"time-left\" className=\"display-1\">{formatSecondsToClock()}</CardSubtitle>\r\n                <ButtonGroup>\r\n                    <Button id=\"start_stop\" onClick={startStop} color=\"primary\">Start stop</Button>\r\n                    <Button id=\"reset\" onClick={reset} color=\"info\">Reset</Button>\r\n                </ButtonGroup>\r\n            </CardBody>\r\n\t\t</Card>\r\n    );\r\n};\r\n\r\nTimerDisplay.propTypes = {\r\n\treset: PropTypes.func,\r\n    startStop: PropTypes.func,\r\n    length: PropTypes.number,\r\n    type: PropTypes.string\r\n}\r\n\r\nexport default TimerDisplay;","import React, { Component } from 'react';\nimport TimerControl from './TimerControl';\nimport TimerDisplay from './TimerDisplay';\nimport { Container, Row, Col, Jumbotron } from 'reactstrap';\n\nconst TYPES = ['session', 'break']\n\nclass PomodoroClock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sessionLength: 1500,\n      breakLength: 300,\n      timerLength: 0,\n      type: TYPES[0],\n      running: false\n    };\n    this.intervalID = null;\n  }\n\n  handleInitTimerLength = (type = TYPES[0]) => {\n    if (!this.state.running) {\n      switch(type)\n      {\n        case TYPES[0]:\n          this.setState(prevState => ({\n            timerLength: prevState.sessionLength\n          }));\n          break;\n        case TYPES[1]:\n          this.setState(prevState => ({\n            timerLength: prevState.breakLength\n          }));\n          break;\n        default:\n          this.setState({timerLength: 0});\n          break;\n      }\n    }\n  }\n\n  handleStartStop = () => {\n    if (!this.intervalID)\n    {\n      this.handleInitTimerLength();\n      this.intervalID = setInterval(this.handleTimerCountDown, 1000);\n    }\n\n    this.setState(prevState => ({\n      running: !prevState.running\n    }));\n  }\n\n  handleTimerCountDown = () => {\n    if (this.state.running) {\n      if (this.state.timerLength > 0) {\n        this.setState({\n          timerLength: this.state.timerLength - 1\n        });\n      } else {\n        document.getElementById('beep').play();\n        this.setState(prevState => ({\n          timerLength: prevState.type === TYPES[0] ? prevState.breakLength : prevState.sessionLength,\n          type: TYPES.find(type => prevState.type !== type)\n        }));\n      }\n    }\n  }\n\n  handleReset = () => {\n    clearInterval(this.intervalID);\n    this.intervalID = null;\n    \n    this.setState({\n      sessionLength: 1500,\n      breakLength: 300,\n      timerLength: 0,\n      type: TYPES[0],\n      running: false\n    });\n\n    document.getElementById('beep').pause();\n    document.getElementById('beep').currentTime = 0;\n  }\n  \n  handleModifyLength = (type, operator) => {\n    if (!this.state.running) {\n      switch(type) {\n        case TYPES[0]:\n          switch(operator) {\n            case '+':\n              if (this.state.sessionLength < 3600)\n              {\n                this.setState(prevState => ({\n                  sessionLength: prevState.sessionLength + 60\n                }));\n              }\n              break;\n            case '-':\n              if (this.state.sessionLength > 60)\n              {\n                this.setState(prevState => ({\n                  sessionLength: prevState.sessionLength - 60\n                }));\n              }\n              break;\n            default:\n              console.log('invalid operator');\n              break;\n          }\n          break;\n        case TYPES[1]:\n          switch(operator) {\n            case '+':\n              if (this.state.breakLength < 3600)\n              {\n                this.setState(prevState => ({\n                  breakLength: prevState.breakLength + 60\n                }));\n              }\n              break;\n            case '-':\n              if (this.state.breakLength > 60)\n              {\n                this.setState(prevState => ({\n                  breakLength: prevState.breakLength - 60\n                }));\n              }\n              break;\n            default:\n              console.log('invalid operator');\n              break;\n          }\n          break;\n          default:\n            console.log('invalid type');\n            break;\n      }\n    }\n  }\n  \n  render() {\n    const reset = this.handleReset;\n    const modifyLength = this.handleModifyLength;\n    const startStop = this.handleStartStop;\n    const { sessionLength, breakLength, timerLength, type } = this.state;\n    return (\n      <Container>\n        <Jumbotron>\n          <h1 className=\"display-4\">Pomodoro clock</h1>\n          <p className=\"lead\">This is the best pomodoro clock you could find !</p>\n          <Row className=\"my-5\">\n            <Col>\n              <TimerControl key={TYPES[0]} type={TYPES[0]} length={sessionLength} modifyLength={modifyLength}/>\n            </Col>\n            <Col>\n              <TimerControl key={TYPES[1]} type={TYPES[1]} length={breakLength} modifyLength={modifyLength}/>\n            </Col>\n          </Row>\n          <Row className=\"my-5\">\n            <Col>\n              <TimerDisplay reset={reset} startStop={startStop} length={timerLength} type={type}/>\n            </Col>\n          </Row>\n        </Jumbotron>\n        <audio id=\"beep\" src=\"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\"></audio>\n      </Container>\n    );\n  }\n}\n\nexport default PomodoroClock;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PomodoroClock from './components/PomodoroClock';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<PomodoroClock />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}